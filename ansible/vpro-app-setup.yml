- name: Setup Tomcat8 & Deploy Artifact
  hosts: appsrvgrp
  become: yes
  vars:
    timestamp: "{{ansible_date_time.date}}_{{ansible_date_time.hour}}_{{ansible_date_time.minute}}"

  tasks:
    - name: Download latest VProfile.war from nexus
      get_url:
        url: "http://{{nexusip}}:8081/repository/{{reponame}}/{{groupid}}/{{time}}/{{build}}/{{vprofile_version}}"
        url_username: "{{USER}}"
        url_password: "{{PASS}}"
        dest: "/tmp/vproapp-{{vprofile_version}}"
      register: wardeploy
      tags: [deploy]

    - name: Check if ROOT exists
      stat:
        path: /usr/local/tomcat/webapps/ROOT
      register: artifact_stat
      tags: [deploy]

    - name: Stop tomcat service
      service:
        name: tomcat
        state: stopped
      tags: [deploy]

    - name: Backup and Deploy Artifact
      block:
        - name: Archive existing ROOT directory
          archive:
            path: /usr/local/tomcat/webapps/ROOT
            dest: "/opt/ROOT_{{timestamp}}.tgz"
          when: artifact_stat.stat.exists
          register: archive_info
          tags: [deploy]

        - name: Copy ROOT to old_ROOT
          shell: cp -r ROOT old_ROOT
          args:
            chdir: /usr/local/tomcat/webapps/

        - name: Delete current ROOT and ROOT.war
          file:
            path: "{{ item }}"
            state: absent
          when: archive_info.changed
          loop:
            - /usr/local/tomcat/webapps/ROOT
            - /usr/local/tomcat/webapps/ROOT.war
          tags: [deploy]

        - name: Deploy new vprofile artifact
          copy:
            src: "/tmp/vproapp-{{vprofile_version}}"
            dest: /usr/local/tomcat/webapps/ROOT.war
            remote_src: yes
          register: deploy_info
          tags: [deploy]

      rescue:
        - name: Restore old ROOT directory on failure
          shell: cp -r old_ROOT ROOT
          args:
            chdir: /usr/local/tomcat/webapps/

        - name: Start tomcat fallback
          service:
            name: tomcat
            state: started

    - name: Start tomcat service after deployment
      service:
        name: tomcat
        state: started
      when: deploy_info.changed
      tags: [deploy]

    - name: Wait for WAR to extract
      wait_for:
        path: /usr/local/tomcat/webapps/ROOT
      tags: [deploy]

# Uncomment if you have a configuration file to deploy
#    - name: Deploy web configuration file
#      template:
#        src: templates/application.j2
#        dest: /usr/local/tomcat/webapps/ROOT/WEB-INF/classes/application.properties
#        force: yes
#      notify:
#        - Restart Tomcat
#      tags: [deploy]

  handlers:
    - name: Restart Tomcat
      service:
        name: tomcat
        state: restarted
